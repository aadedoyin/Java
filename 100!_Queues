/*
Anthony A.

Write a Java program to play the game: 100!

1) There is one deck of 100 cards. Each has a value 1-10.
    a. Must use random # method and build the queue using addQueue() method
    b. If the deck ever gets empty, this process is repeated.

2) There must be two players.

3) Each player draws a card off the front of the deck.

4) List of the #'s and what happens:
    1 - minus 10 points, turn is over
    2 - 6 gets the points for # drawn, but turn is over
    7 gets the 7 points and draws again
    8 - 10 gets the points for # drawn, but turn is over

5) First player to 100 wins! (Add another 100 cards, if the deck of cards run out)
    - Must use a queue to represent the deck of cards
    - Be sure to include comments
 */
import org.jetbrains.annotations.NotNull;
import java.util.Random;

public class Project6 {
    public static void main(String[] args) {

        Queue deck = new Queue();
        Players player1 = new Players(1);
        Players player2 = new Players(2);
        deck.playGame(player1, player2);
    }
}
// ******** Queue Class ********
class Queue{
    Nodes queueFront;
    Nodes queueRear;

    // ******** default constructor ********

    Queue()     // Constructor
    {
        this.queueFront = null;
        this.queueRear = null;
    }

// ******** isEmpty ********

    public boolean isEmptyQueue()     // Utility method to check if the queue is empty or not
    {
        return (queueFront == null);
    }

// ******** addQueue  ********

    public void addQueue(int x) // insert at the back of the queue
    {
        Nodes node = new Nodes();
        node.data = x;
        node.next = null;

        if (isEmptyQueue())
        {
            this.queueFront = node;
        }
        else
        {
            this.queueRear.next = node;
        }
        this.queueRear = node;
    } // end of addQueue()

// ******** front ********

    public int front()     // Utility method to return front element in a queue
    {
        // check for empty Queue
        if (!isEmptyQueue()) {
            return queueFront.data;
        }
        else {
            System.out.println("Queue is empty");
            return -1;
        }
    }  // end of front()

// ******** deleteQueue ********

    // Utility method to remove element from front of the Queue
    public void deleteQueue() // remove from the beginning
    {
        // check for queue underflow
        if (!this.isEmptyQueue())
            this.queueFront = this.queueFront.next;
        else
            System.out.print("** Can not deleteQueue an empty queue ** ");

        if (this.queueFront == null)
            this.queueRear = null;
    }

    // ******** displayQueue ********

    //Utility method to display elements starting from the front of the Queue
    public void displayQueue() {
        Nodes node = queueFront;
        while (node != null) {
            System.out.print(node.data + " <-- ");
            node = node.next;
        }
    } // end of displayQueue method

    //Method that creates the deck for the game
    public void loadDeck() {
        Random randomNum = new Random();
        for (int i = 0; i < 100; i++) {
            int random = randomNum.nextInt(10) + 1;
            this.addQueue(random);
        }
        System.out.println("Deck is set with 100 Cards!");
    }

    //Method that reloadsDeck if deck equals zero
    public void reloadDeck() {
        loadDeck();
    }

    //Method that goes through the rules of the game
    public void playGame(@NotNull Players player1, Players player2) {
        System.out.println("Start Game,");
        loadDeck();
        int cardNum = 100;

        //creates current player and sets it to player 1
        Players currPlayer = player1;

        //loops until one player has a score above 100 or cardNum is less than 0.
        while (player1.score < 100 && player2.score < 100 && cardNum > 0) {
            player1.displayPlayerInfo();
            player2.displayPlayerInfo();
            System.out.println("***************");

            System.out.println("Player "+currPlayer.playerId+" turn");
            if (this.front() == 1) { //statement that subtracts 10 from the card 1
                currPlayer.score -= 10;
                System.out.println("Player "+currPlayer.playerId+" draws a " + this.front() + ", losses 10 points");
                this.deleteQueue();
            } else if (this.front() >= 2 && this.front() <= 6) { //statement that adds points from 2-6
                currPlayer.score += this.front();
                System.out.println("Player "+currPlayer.playerId+" draws a " + this.front());
                this.deleteQueue();
            } else if (this.front() >= 8 && this.front() <= 10) { //statement that adds points from 8-10
                currPlayer.score += this.front();
                System.out.println("Player "+currPlayer.playerId+" draws a " + this.front());
                this.deleteQueue();
            } else { //state that adds 7 points and runs drawAgain method
                currPlayer.score += 7;
                System.out.println("Player "+currPlayer.playerId+" draws a 7");
                this.deleteQueue();
                cardNum -= 1;
                System.out.println("Cards left in deck " + (cardNum));
                drawAgain(currPlayer, cardNum);
            }
            cardNum -= 1;
            System.out.println("Cards left in deck " + (cardNum));
            System.out.println("End of Player "+currPlayer.playerId+" turn");
            System.out.println("***************");

            if (currPlayer.playerId == 1) {
                currPlayer = player2;
            }
            else {
                currPlayer = player1;
            }
        }
        winner(player1); //checks which player wins the game
        if (isEmptyQueue() ) { //if card cardNum reaches 0, the deck is empty and add cards to the deck
            reloadDeck();
            System.out.println("Deck has been reloaded!");
            cardNum += 100;
        }
    }

    //Method that runs if card drawn is a 7. Allows user to draw again from the deck.
    public void drawAgain(Players player, int cardNum){
        if (this.front() == 1) {
            player.score -= 10;
            cardNum -= 1;
            System.out.println("Player " + player.playerId + " draws a " + this.front() + ", losses 10 points");
        }
        else if(this.front() == 7){ //repeats method if 7 is drawn
            System.out.println("Player " + player.playerId + " draws a " + this.front());
            player.score += this.front();
            cardNum -= 1;
            this.deleteQueue();
            drawAgain(player, cardNum);
        }
        else {
            System.out.println("Player " + player.playerId + " draws a " + this.front());
            player.score += this.front();
            cardNum -= 1;
        }
        this.deleteQueue();
    }

    //Method to determine winner of the game
    public void winner(@NotNull Players player1){
        if(player1.score >= 100)
            System.out.println("Player 1 Wins");
        else
            System.out.println("Player 2 Wins");
    }
} // end of class Queue

//Player Class to hold Score are playerID.
class Players {
    int score;
    int playerId;

    Players(int playerId) {
        this.score = 0;
        this.playerId = playerId;
    }
    //Method to display player ID and score
    public void displayPlayerInfo() {
        System.out.println("Player " + playerId + " - " + this.score);
    }
}
